
@{
    ViewData["Title"] = "角色管理";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section modal{
    <div id="editLay" style="display: none;">
        <div class="layui-row">
            <div class="layui-col-md11">
                <form class="layui-form" id="formEdit" lay-filter="formEdit">
                    <br />
                    <input type="text" name="formInfoID" id="formInfoID" class="layui-hide">
                    @*<input type="text" name="tbxAuthIDList" id="tbxAuthIDList" class="layui-input">*@

                    <div class="layui-form-item">
                        <label class="layui-form-label">角色名称</label>
                        <div class="layui-input-block">
                            <input type="text" name="tbxRoleName" lay-verify="required" placeholder="角色名称" class="layui-input">
                        </div>
                    </div>
                    <div class="layui-form-item layui-form-text">
                        <label class="layui-form-label">角色描述</label>
                        <div class="layui-input-block">
                            <textarea placeholder="角色描述" name="tbxRoleDescribe" class="layui-textarea"></textarea>
                        </div>
                    </div>

                    <div class="layui-form-item">
                        <div class="layui-input-block">
                            <button class="layui-btn" lay-submit lay-filter="formDemo">提交</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<div class="layui-row">
    <div class="layui-col-xs12">
        <div class="grid-demo">
            <form class="layui-form layui-form-pane" id="formSearch">
                <div class="layui-form-item">
                    <div class="layui-inline">
                        <label class="layui-form-label">角色名称</label>
                        <div class="layui-input-inline">
                            <input type="text" name="searchRoleName" id="searchRoleName" class="layui-input">
                        </div>
                    </div>
                    <div class="layui-inline">
                        <div class="layui-input-inline">
                            <div class="layui-btn-group">
                                <button class="layui-btn" type="button" id="btnSearch">查询</button>
                                <button class="layui-btn layui-btn-primary" type="button" id="btnRefresh">
                                    <i class="layui-icon layui-icon-refresh"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            <table class="layui-hide" id="tbInfo" lay-filter="tbInfo"></table>

            <script type="text/html" id="barDemo">
                <a class="layui-btn layui-btn-sm" lay-event="edit"><i class="layui-icon layui-icon-edit"></i></a>
                <a class="layui-btn layui-btn-danger layui-btn-sm" lay-event="delRow"><i class="layui-icon layui-icon-delete"></i></a>
                <a class="layui-btn layui-btn-normal layui-btn-sm" lay-event="editAuth">设置权限</a>
                <a class="layui-btn layui-btn-normal layui-btn-sm" lay-event="editUser">设置人员</a>
            </script>

            <script type="text/html" id="toolbarDemo">
                <div class="layui-btn-container">
                    <div class="layui-btn-group">
                        <button class="layui-btn layui-btn-normal layui-btn-sm" lay-event="add">新增</button>
                    </div>
                </div>
            </script>
        </div>
    </div>
</div>
<script>
    layui.use(['tree', 'util', 'table', 'laydate', 'form'], function () {
        var tree = layui.tree
            , layer = layui.layer
            , util = layui.util
            , table = layui.table
            , laydate = layui.laydate
            , form = layui.form;

        var tableIns = table.render({
            elem: '#tbInfo'
            , url: '/SysRole/ListPage'
            , toolbar: '#toolbarDemo' //开启头部工具栏，并为其绑定左侧模板
            , defaultToolbar: ['filter', 'exports']
            , title: '数据表格'
            , cols: [[
                { type: 'checkbox', fixed: 'left' }
                , { align: 'center', toolbar: '#barDemo', width: 300, title: '操作' }
                , { field: 'roleID', title: 'ID', width: 80, fixed: 'left', hide: true }
                , { field: 'roleName', title: '角色名称' }
                , { field: 'roleDescribe', title: '角色描述' }
            ]]
            , page: true
            , height: 'full-150'
        });

        table.on('tool(tbInfo)', function (obj) { //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter="对应的值"
            var data = obj.data; //获得当前行数据
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            var tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）

            switch (obj.event) {
                case 'edit':
                    //console.log(data);
                    //console.log(data.materialDesc);
                    layer.open({
                        type: 1,//类型,
                        id: 'LAY_layuipro', //设定一个id，防止重复弹出
                        //area: ['600px', '700px'],//定义宽和高
                        area: ['600px'],//定义宽和高
                        title: '编辑信息',//题目
                        shadeClose: false,//点击遮罩层关闭
                        content: $('#editLay'),//打开的内容
                        success: function (layero, index) {
                            //formTest 即 class="layui-form" 所在元素属性 lay-filter="" 对应的值
                            form.val("formEdit", {
                                "formInfoID": data.roleId
                                , "tbxRoleName": data.roleName
                                , "tbxRoleDescribe": data.roleDescribe
                            });
                            $(".layui-layer-shade").appendTo(layero.parent());
                        }
                    });
                    break;
                case 'delRow':
                    layer.confirm('确定要删除吗？', function (index) {
                        $.post("/SysRole/Del", { id: data.roleId }, function (result) {
                            if (result == "ok") {
                                layer.msg('操作成功！', { icon: 6 });
                                tableIns.reload();
                            }
                            else {
                                layer.msg('错误:' + result, { icon: 5 });
                            }
                        });
                        return false;
                    });
                    break;
                 case 'editAuth':
                    window.location.hash  = "/SysRole/Edit/id="+data.roleId;
                    break;
            };
        });

        table.on('toolbar(tbInfo)', function (obj) {
            switch (obj.event) {
                case 'add':
                    //window.location.hash  = "/SysRole/Edit";
                    //window.open("SysRole/Edit");
                    layer.open({
                        type: 1,//类型,
                        id: 'LAY_layuipro', //设定一个id，防止重复弹出
                        area: ['700px', '600px'],//定义宽和高
                        //area: ['600px'],//定义宽和高
                        title: '新增信息',//题目
                        shadeClose: false,//点击遮罩层关闭
                        content: $('#editLay'),//打开的内容
                        success: function (layero, index) {
                            $("#formEdit")[0].reset();
                            $(".layui-layer-shade").appendTo(layero.parent());
                        }
                    });
                    break;
            };
        });

        //table.on('checkbox(tbAuthInfo)', function (obj) {
        //    //console.log(obj.checked); //当前是否选中状态
        //    $("#tbxAuthIDList").val(obj.data);
        //    //console.log(obj.data); //选中行的相关数据
        //    //console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one
        //});

        form.on('submit(formDemo)', function (data) {
            var checkStatus = table.checkStatus('tbAuthInfo'); //idTest 即为基础参数 id 对应的值
            //console.log(checkStatus.data) //获取选中行的数据

            var authIDList = [];
            for (var i = 0; i < checkStatus.data.length; i++) {
                //console.log(checkStatus.data[i].authorityId);
                authIDList.push(checkStatus.data[i].authorityId);
            }

            data.field.authIDList = authIDList;
            console.log(data.field) //当前容器的全部表单字段，名值对形式：{name: value}
            
            layer.confirm('确定要提交吗？', function (index) {
                $.post("/SysRole/Update", data.field, function (result) {
                    if (result == "ok") {
                        layer.msg('操作成功！', { icon: 6 });
                        layer.closeAll('page'); //关闭所有页面层
                        tableIns.reload();
                    }
                    else {
                        layer.msg('错误:' + result, { icon: 5 });
                    }
                });
                return false;
            });

            return false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。
        });

        function tableReload() {
            tableIns.reload({
                where: { //设定异步数据接口的额外参数，任意设
                    searchRoleName: $("#searchRoleName").val()
                    , searchRoleType: $("#searchRoleType").val()
                }
                , page: {
                    curr: 1 //重新从第 1 页开始
                }
            });
        }

        $("#btnSearch").click(function () {
            tableReload();
        });

        $("#btnRefresh").click(function () {
            $("#formSearch")[0].reset();
            tableReload();
        });
    });
</script>



